<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>toolkit.transformers.classifiers</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for toolkit.transformers.classifiers</h1><div class="highlight"><pre>
<span></span><span class="sd">&quot;&quot;&quot;Naive Bayes classifier.&quot;&quot;&quot;</span>

<span class="kn">import</span> <span class="nn">copy</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">typing</span>

<span class="kn">from</span> <span class="nn">collections</span> <span class="k">import</span> <span class="n">namedtuple</span>

<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="kn">from</span> <span class="nn">nltk</span> <span class="k">import</span> <span class="n">NaiveBayesClassifier</span>
<span class="kn">from</span> <span class="nn">nltk.probability</span> <span class="k">import</span> <span class="n">ELEProbDist</span>

<span class="kn">from</span> <span class="nn">sklearn.base</span> <span class="k">import</span> <span class="n">TransformerMixin</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="k">import</span> <span class="n">KFold</span>

<span class="c1"># Note: ATM try the approach with NLTK NaiveBayesClassifier, alternative</span>
<span class="c1"># to this approach would be MultinomialNB classifier from scikit library,</span>
<span class="c1"># which # would probably integrate in a better way with the classification</span>
<span class="c1"># pipeline.</span>


<div class="viewcode-block" id="NBClassifier"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.NBClassifier">[docs]</a><span class="k">class</span> <span class="nc">NBClassifier</span><span class="p">(</span><span class="n">TransformerMixin</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Naive Bayes classifier for part-of-text classification.</span>

<span class="sd">    The classifier creates a wrapper around NLTK NaiveBayesClassifier</span>
<span class="sd">    and implements `transform` and `fit_transform` methods suitable for</span>
<span class="sd">    pipeline integration.</span>

<span class="sd">    :param label_probdist: P(label)</span>

<span class="sd">        The probability distribution over labels.</span>

<span class="sd">        It is expressed as a ``ProbDistI`` whose samples are labels.</span>
<span class="sd">        I.e., P(label) = ``label_probdist.prob(label)``.</span>

<span class="sd">    :param feature_probdist: P(fname=fval|label)</span>

<span class="sd">        The probability distribution for feature values, given labels.</span>

<span class="sd">        It is expressed as a dictionary whose keys are ``(label, fname)``</span>
<span class="sd">        pairs and whose values are ``ProbDistI`` objects over feature values.</span>
<span class="sd">        I.e., P(fname=fval|label) = ``feature_probdist[label,fname].prob(fval)``.</span>
<span class="sd">        If a given ``(label,fname)`` is not a key in ``feature_probdist``,</span>
<span class="sd">        then it is assumed that the corresponding P(fname=fval|label)</span>
<span class="sd">        is 0 for all values of ``fval``.</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span>
                 <span class="n">label_probdist</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                 <span class="n">feature_probdist</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                 <span class="n">estimator</span><span class="o">=</span><span class="n">ELEProbDist</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Initialize NBClassifier.&quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_estimator</span> <span class="o">=</span> <span class="n">estimator</span>

        <span class="c1"># in case arguments are specified (ie. when restoring the classifier)</span>
        <span class="k">if</span> <span class="nb">all</span><span class="p">([</span><span class="n">label_probdist</span><span class="p">,</span> <span class="n">feature_probdist</span><span class="p">]):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_classifier</span> <span class="o">=</span> <span class="n">NaiveBayesClassifier</span><span class="p">(</span>
                <span class="n">label_probdist</span><span class="o">=</span><span class="n">label_probdist</span><span class="p">,</span>
                <span class="n">feature_probdist</span><span class="o">=</span><span class="n">feature_probdist</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_classifier</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">features</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return features most informative for classification.&quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_classifier</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">None</span>

        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_classifier</span><span class="o">.</span><span class="n">most_informative_features</span><span class="p">()</span>

    <span class="c1"># noinspection PyPep8Naming, PyUnusedLocal</span>
<div class="viewcode-block" id="NBClassifier.fit"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.NBClassifier.fit">[docs]</a>    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span>
            <span class="n">X</span><span class="p">:</span> <span class="n">typing</span><span class="o">.</span><span class="n">Iterable</span><span class="p">,</span>  <span class="c1"># pylint: disable=invalid-name</span>
            <span class="n">y</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>  <span class="c1"># pylint: disable=unused-argument</span>
            <span class="o">**</span><span class="n">fit_params</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Fits the classifier to the given data set.</span>

<span class="sd">        :param X: Iterable, output of FeatureExtractor</span>

<span class="sd">            The X is expected to be an iterable of tuples (tagged_word, feature_set, label),</span>
<span class="sd">            where feature set is a dictionary of evaluated features.</span>
<span class="sd">            The format of X matches the output of `FeatureExtractor`.</span>

<span class="sd">        :param y: redundant (included to preserve base class method definition)</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="c1"># NLTK classifier expects stacked featuresets for the training,</span>
        <span class="c1"># so we need to reduce the dimenstionality</span>
        <span class="n">labeled_featuresets</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">X</span><span class="p">:</span>
            <span class="n">labeled_featuresets</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span>
                <span class="p">(</span><span class="n">featureset</span><span class="p">,</span> <span class="n">feature_label</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">featureset</span><span class="p">,</span> <span class="n">feature_label</span> <span class="ow">in</span> <span class="n">entry</span>
            <span class="p">])</span>

        <span class="c1"># initialize the NLTK classifier</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_classifier</span> <span class="o">=</span> <span class="n">NaiveBayesClassifier</span><span class="o">.</span><span class="n">train</span><span class="p">(</span>
            <span class="n">labeled_featuresets</span><span class="p">,</span>
            <span class="n">estimator</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">_estimator</span>
        <span class="p">)</span>

        <span class="k">return</span> <span class="bp">self</span></div>

    <span class="c1"># noinspection PyPep8Naming, PyUnusedLocal</span>
<div class="viewcode-block" id="NBClassifier.transform"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.NBClassifier.transform">[docs]</a>    <span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>  <span class="c1"># pylint: disable=invalid-name,unused-argument</span>
        <span class="sd">&quot;&quot;&quot;Auxiliary function to be used in pipeline.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span></div>

    <span class="c1"># noinspection PyPep8Naming</span>
<div class="viewcode-block" id="NBClassifier.evaluate"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.NBClassifier.evaluate">[docs]</a>    <span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span>
                 <span class="n">X</span><span class="p">:</span> <span class="n">typing</span><span class="o">.</span><span class="n">Iterable</span><span class="p">,</span>  <span class="c1"># pylint: disable=invalid-name</span>
                 <span class="n">y</span><span class="p">:</span> <span class="n">typing</span><span class="o">.</span><span class="n">Iterable</span><span class="p">,</span>
                 <span class="n">sample</span><span class="p">,</span>
                 <span class="n">n</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
                 <span class="n">filter_hooks</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Perform evaluation of the classifier instance.</span>

<span class="sd">        :param X: Iterable, test data</span>

<span class="sd">            Same shape as for `fit` and `fit_predict` methods</span>

<span class="sd">        :param y: Iterable, of labels</span>
<span class="sd">        :param sample: one of labels to get the prediction for</span>

<span class="sd">            For example, if labels are [&#39;class_A&#39;, &#39;class_B&#39;, &#39;class_C&#39;], the sample</span>
<span class="sd">            could be &#39;class_A&#39;.</span>

<span class="sd">        :param n: int, number of candidates to output</span>

<span class="sd">        :param filter_hooks: list of hooks, will be used to filter predictions</span>

<span class="sd">            The hook should take a tuple of ((word, tag), score) as its parameter</span>
<span class="sd">            and output boolean whether or not it passes the filter.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="c1"># noinspection PyTypeChecker,PyTypeChecker</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;`X` and `y` must be of the same length.&quot;</span><span class="p">)</span>

        <span class="n">candidate_arr</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fit_predict</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="p">,</span> <span class="n">sample</span><span class="o">=</span><span class="n">sample</span><span class="p">,</span> <span class="n">filter_hooks</span><span class="o">=</span><span class="n">filter_hooks</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">correctly_predicted</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">candidates</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">candidate_arr</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
            <span class="n">pred</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_valid_candidates</span><span class="p">(</span><span class="n">candidates</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
            <span class="n">correctly_predicted</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pred</span><span class="p">)</span>

        <span class="c1"># return the accuracy score</span>
        <span class="c1"># noinspection PyTypeChecker</span>
        <span class="k">return</span> <span class="n">precision</span><span class="p">(</span><span class="n">total</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="n">correct</span><span class="o">=</span><span class="n">correctly_predicted</span><span class="p">)</span></div>

    <span class="c1"># noinspection PyPep8Naming</span>
<div class="viewcode-block" id="NBClassifier.fit_predict"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.NBClassifier.fit_predict">[docs]</a>    <span class="k">def</span> <span class="nf">fit_predict</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span>
                    <span class="n">X</span><span class="p">:</span> <span class="n">typing</span><span class="o">.</span><span class="n">Iterable</span><span class="p">,</span>  <span class="c1"># pylint: disable=invalid-name</span>
                    <span class="n">y</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>  <span class="c1"># pylint: disable=unused-argument</span>
                    <span class="o">**</span><span class="n">fit_params</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Make prediction about the given data.</span>

<span class="sd">        :param X: Iterable, prediction data</span>

<span class="sd">            The prediction data is expected to be of type</span>
<span class="sd">            List[(name_tuple, feature_set [,feature,label)] where feature_set</span>
<span class="sd">            corresponds to the output of FeatureExtractor and feature</span>
<span class="sd">            labels (if provided) should be None (will be ignored anyway).</span>

<span class="sd">        :param y: redundant (included to preserve bace class method definition)</span>
<span class="sd">        :param fit_params: kwargs, fit parameters</span>

<span class="sd">            n: number of candidates to output</span>
<span class="sd">            sample: one of labels to get the prediction for (for example,</span>
<span class="sd">            if labels are [&#39;class_A&#39;, &#39;class_B&#39;, &#39;class_C&#39;], the sample</span>
<span class="sd">            could be &#39;class_A&#39;.</span>
<span class="sd">            filter_hooks: list of hooks, will be used to filter predictions</span>

<span class="sd">                The hook should take a tuple of ((word, tag), score) as its parameter</span>
<span class="sd">                and output boolean whether or not it passes the filter.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="c1"># get fit parameters</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">fit_params</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
        <span class="n">sample</span> <span class="o">=</span> <span class="n">fit_params</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>

        <span class="c1"># do not allow sample to be `None` (wouldn&#39;t be possible to sort</span>
        <span class="c1"># the candidates in a logical way)</span>
        <span class="k">if</span> <span class="n">sample</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;`fit_parameter` `sample` was not specified.&quot;</span>
                             <span class="s2">&quot; This is not allowed in `fit_predict` method&quot;</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="nb">all</span><span class="p">([</span><span class="nb">hasattr</span><span class="p">(</span><span class="n">var</span><span class="p">,</span> <span class="s1">&#39;__len__&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="p">[</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="ow">or</span> <span class="p">[]]]):</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s2">&quot;`X` and `y` must implement `__len__` method&quot;</span><span class="p">)</span>

        <span class="c1"># noinspection PyTypeChecker</span>
        <span class="n">predictions</span> <span class="o">=</span> <span class="p">[</span><span class="kc">None</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">X</span><span class="p">):</span>
            <span class="n">candidate_pred</span> <span class="o">=</span> <span class="p">[</span><span class="kc">None</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">candidate</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">candidate</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
                    <span class="c1"># feature label was provided as part of X set (usual case), ignore it</span>
                    <span class="n">name_tuple</span><span class="p">,</span> <span class="n">features</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">candidate</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">name_tuple</span><span class="p">,</span> <span class="n">features</span> <span class="o">=</span> <span class="n">candidate</span>
                <span class="n">candidate_pred</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">name_tuple</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">sample</span><span class="o">=</span><span class="n">sample</span><span class="p">))</span>

            <span class="n">sorted_pred</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">candidate_pred</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

            <span class="k">for</span> <span class="n">hook</span> <span class="ow">in</span> <span class="n">fit_params</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;filter_hooks&#39;</span><span class="p">,</span> <span class="p">[]):</span>
                <span class="n">sorted_pred</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">hook</span><span class="p">,</span> <span class="n">sorted_pred</span><span class="p">))</span>

            <span class="n">predictions</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sorted_pred</span><span class="p">[:</span><span class="n">n</span><span class="p">]</span>

        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">predictions</span><span class="p">)</span></div>

<div class="viewcode-block" id="NBClassifier.predict"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.NBClassifier.predict">[docs]</a>    <span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">features</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span> <span class="n">sample</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">typing</span><span class="o">.</span><span class="n">Any</span><span class="p">:</span>
        <span class="sd">&quot;&quot;&quot;Make predictions based on given features.</span>

<span class="sd">        :param features: dict, features to be used for prediction</span>

<span class="sd">            Dictionary of (feature_key, feature_value)</span>

<span class="sd">        :param sample:</span>

<span class="sd">            one of labels to get the prediction for (for example,</span>
<span class="sd">            if labels are [&#39;class_A&#39;, &#39;class_B&#39;, &#39;class_C&#39;], the sample</span>
<span class="sd">            could be &#39;class_A&#39;.</span>

<span class="sd">        :returns: Union[float, dict]</span>

<span class="sd">            If `sample` is specified, returns P(sample|features),</span>
<span class="sd">            ie the probability of `sample` given features,</span>
<span class="sd">            where `sample` is one of labels.</span>
<span class="sd">            Otherwise returns dict of (label: max_prob) for all</span>
<span class="sd">            known labels.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_classifier</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;Unable to make predictions. &quot;</span>
                             <span class="s2">&quot;Classifier has not been trained yet!&quot;</span><span class="p">)</span>

        <span class="n">prob_dist</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_classifier</span><span class="o">.</span><span class="n">prob_classify</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
        <span class="c1"># sort by the probability</span>

        <span class="k">if</span> <span class="n">sample</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="n">probs</span> <span class="o">=</span> <span class="n">prob_dist</span><span class="o">.</span><span class="n">prob</span><span class="p">(</span><span class="n">sample</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">probs</span> <span class="o">=</span> <span class="p">{</span><span class="n">s</span><span class="p">:</span> <span class="n">prob_dist</span><span class="o">.</span><span class="n">prob</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_classifier</span><span class="o">.</span><span class="n">labels</span><span class="p">()}</span>

        <span class="k">return</span> <span class="n">probs</span></div>

<div class="viewcode-block" id="NBClassifier.show_most_informative_features"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.NBClassifier.show_most_informative_features">[docs]</a>    <span class="k">def</span> <span class="nf">show_most_informative_features</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Print features most informative for classification.&quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_classifier</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">_classifier</span><span class="o">.</span><span class="n">show_most_informative_features</span><span class="p">()</span></div>

<div class="viewcode-block" id="NBClassifier.export"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.NBClassifier.export">[docs]</a>    <span class="k">def</span> <span class="nf">export</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">export_dir</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">export_name</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sd">&quot;&quot;&quot;Export timestamped pickled classifier to the given directory.</span>

<span class="sd">        :returns: path to the timestamped .checkpoint file</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">export_dir</span> <span class="o">=</span> <span class="n">export_dir</span> <span class="ow">or</span> <span class="s1">&#39;export/&#39;</span>
        <span class="n">export_name</span> <span class="o">=</span> <span class="n">export_name</span> <span class="ow">or</span> <span class="s1">&#39;classifier&#39;</span>

        <span class="k">if</span> <span class="n">export_name</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;.checkpoint&#39;</span><span class="p">):</span>
            <span class="n">export_name</span> <span class="o">=</span> <span class="s2">&quot;.&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">export_name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>

        <span class="n">time_stamp</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">timestamp</span><span class="p">())</span>

        <span class="c1"># create export directory</span>
        <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">export_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

        <span class="n">time_stamped_fname</span> <span class="o">=</span> <span class="s2">&quot;.&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">export_name</span><span class="p">,</span> <span class="n">time_stamp</span><span class="p">,</span> <span class="s1">&#39;checkpoint&#39;</span><span class="p">])</span>
        <span class="n">time_stamped_fpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">export_dir</span><span class="p">,</span> <span class="n">time_stamped_fname</span><span class="p">)</span>

        <span class="c1"># pickle and export the classifier</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">time_stamped_fpath</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">exp_file</span><span class="p">:</span>
            <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exp_file</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">time_stamped_fpath</span></div>

<div class="viewcode-block" id="NBClassifier.restore"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.NBClassifier.restore">[docs]</a>    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">restore</span><span class="p">(</span><span class="n">checkpoint</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s2">&quot;NBClassifier&quot;</span><span class="p">:</span>
        <span class="sd">&quot;&quot;&quot;Restores the classifier from a checkpoint file.</span>

<span class="sd">        :param checkpoint: path to directory or specific checkpoint</span>

<span class="sd">            If path to directory provided, the newest checkpoint</span>
<span class="sd">            is restored.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">def</span> <span class="nf">_restore_checkpoint</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">checkpoint_file</span><span class="p">:</span>
                <span class="c1"># load the exported classifier</span>
                <span class="k">return</span> <span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">checkpoint_file</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isdir</span><span class="p">(</span><span class="n">checkpoint</span><span class="p">):</span>
            <span class="n">checkpoint_dir</span> <span class="o">=</span> <span class="n">checkpoint</span>
            <span class="n">checkpoints</span> <span class="o">=</span> <span class="p">[</span>
                <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">checkpoint_dir</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">checkpoint</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;.checkpoint&#39;</span><span class="p">)</span>
            <span class="p">]</span>
            <span class="c1"># find the latest</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">checkpoints</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;No checkpoints were found in `</span><span class="si">{}</span><span class="s2">`.&quot;</span>
                                 <span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">checkpoint</span><span class="p">))</span>
            <span class="n">latest_checkpoint</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">checkpoints</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">clf</span> <span class="o">=</span> <span class="n">_restore_checkpoint</span><span class="p">(</span><span class="n">latest_checkpoint</span><span class="p">)</span>

        <span class="k">else</span><span class="p">:</span>
            <span class="n">clf</span> <span class="o">=</span> <span class="n">_restore_checkpoint</span><span class="p">(</span><span class="n">checkpoint</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">clf</span></div>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_valid_candidates</span><span class="p">(</span><span class="n">candidates</span><span class="p">:</span> <span class="n">typing</span><span class="o">.</span><span class="n">Iterable</span><span class="p">,</span> <span class="n">label</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Check whether the correct label is among candidates.&quot;&quot;&quot;</span>
        <span class="k">for</span> <span class="n">candidate</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">candidates</span><span class="p">:</span>
            <span class="c1"># FIXME: a bug here, NLTK lets weird things like &#39;**&#39; go through -&gt; causes crash</span>
            <span class="n">candidate_name</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">candidate</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">candidate_name</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">):</span>
                    <span class="k">return</span> <span class="kc">True</span>
            <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">False</span>

        <span class="k">return</span> <span class="kc">False</span></div>


<span class="c1"># noinspection PyPep8Naming, PyUnusedLocal</span>
<div class="viewcode-block" id="cross_validate"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.cross_validate">[docs]</a><span class="k">def</span> <span class="nf">cross_validate</span><span class="p">(</span><span class="n">classifier</span><span class="p">,</span>
                   <span class="n">X</span><span class="p">:</span> <span class="n">typing</span><span class="o">.</span><span class="n">Iterable</span><span class="p">,</span>  <span class="c1"># pylint: disable=invalid-name</span>
                   <span class="n">y</span><span class="p">:</span> <span class="n">typing</span><span class="o">.</span><span class="n">Iterable</span><span class="p">,</span>
                   <span class="n">sample</span><span class="p">,</span>
                   <span class="n">n</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
                   <span class="n">folds</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
                   <span class="n">filter_hooks</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                   <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Evaluate cross-validation accuracy of the classifier.</span>

<span class="sd">    **Note:** this method DOES NOT evaluate the INSTANCE of the classifier.</span>
<span class="sd">    Instead, it trains a shadow classifier of the same parameters as the</span>
<span class="sd">    given `classifier` and evaluates its accuracy.</span>

<span class="sd">    :param classifier: NBClassifier instance to be evaluated</span>
<span class="sd">    :param X: Iterable of train data</span>

<span class="sd">        The same as is provided to `fit` method.</span>

<span class="sd">    :param y: Iterable of labels</span>
<span class="sd">    :param sample: one of labels</span>

<span class="sd">        one of labels to get the prediction for (for example,</span>
<span class="sd">        if labels are [&#39;class_A&#39;, &#39;class_B&#39;, &#39;class_C&#39;], the sample</span>
<span class="sd">        could be &#39;class_A&#39;.</span>

<span class="sd">    :param n: int, number of candidates to output</span>
<span class="sd">    :param folds: int, number of folds to be used for cross-validation</span>
<span class="sd">    :param filter_hooks: list of hooks, will be used to filter predictions</span>

<span class="sd">        The hook should take a tuple of ((word, tag), score) as its parameter</span>
<span class="sd">        and output boolean whether or not it passes the filter.</span>

<span class="sd">    :param shuffle: whether to shuffle the data</span>

<span class="sd">        If None, no cross-validaiton is performed</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">classifier</span><span class="p">,</span> <span class="n">NBClassifier</span><span class="p">):</span>
        <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s2">&quot;`classifier` expected to be of type `</span><span class="si">{}</span><span class="s2">`, got `</span><span class="si">{}</span><span class="s2">`&quot;</span>
                        <span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">NBClassifier</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">classifier</span><span class="p">)))</span>

    <span class="c1"># disable inspection and let it fail if x and y are not seized</span>
    <span class="c1"># noinspection PyTypeChecker</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">):</span>
        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;`X` and `y` must be of the same length.&quot;</span><span class="p">)</span>

    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>

    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>

    <span class="c1"># copy the classifier to avoid corrupting the original one</span>
    <span class="n">clf</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">classifier</span><span class="p">)</span>

    <span class="n">accuracy</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="c1"># perform KFold</span>
    <span class="n">kf</span> <span class="o">=</span> <span class="n">KFold</span><span class="p">(</span><span class="n">n_splits</span><span class="o">=</span><span class="n">folds</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="n">shuffle</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">train_index</span><span class="p">,</span> <span class="n">test_index</span> <span class="ow">in</span> <span class="n">kf</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">train_index</span><span class="p">],</span> <span class="n">X</span><span class="p">[</span><span class="n">test_index</span><span class="p">]</span>
        <span class="n">_</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">y</span><span class="p">[</span><span class="n">train_index</span><span class="p">],</span> <span class="n">y</span><span class="p">[</span><span class="n">test_index</span><span class="p">]</span>

        <span class="c1"># fit with the collapsed data</span>
        <span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>

        <span class="c1"># make predictions</span>
        <span class="n">score</span> <span class="o">=</span> <span class="n">clf</span><span class="o">.</span><span class="n">evaluate</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="p">,</span> <span class="n">sample</span><span class="o">=</span><span class="n">sample</span><span class="p">,</span>
                             <span class="n">filter_hooks</span><span class="o">=</span><span class="n">filter_hooks</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="c1"># compute the accuracy</span>
        <span class="n">accuracy</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>

    <span class="c1"># return the accuracy score</span>
    <span class="n">accuracy</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">accuracy</span><span class="p">)</span>
    <span class="n">Score</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Score&#39;</span><span class="p">,</span> <span class="s1">&#39;values mean std&#39;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">Score</span><span class="p">(</span><span class="n">accuracy</span><span class="p">,</span> <span class="n">accuracy</span><span class="o">.</span><span class="n">mean</span><span class="p">(),</span> <span class="n">accuracy</span><span class="o">.</span><span class="n">std</span><span class="p">())</span></div>


<div class="viewcode-block" id="precision"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.precision">[docs]</a><span class="k">def</span> <span class="nf">precision</span><span class="p">(</span><span class="n">total</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">correct</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="sd">&quot;&quot;&quot;Calculate precision.&quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="nb">float</span><span class="p">(</span><span class="n">correct</span> <span class="o">/</span> <span class="n">total</span><span class="p">)</span></div>


<div class="viewcode-block" id="weighted_precision"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.classifiers.weighted_precision">[docs]</a><span class="k">def</span> <span class="nf">weighted_precision</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">,</span> <span class="n">weights</span><span class="p">):</span>  <span class="c1"># pylint: disable=unused-argument</span>
    <span class="sd">&quot;&quot;&quot;Calculate weighted precision.&quot;&quot;&quot;</span>
    <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s2">&quot;The feature has not been implemented yet.&quot;</span>
                              <span class="s2">&quot; Sorry for the inconvenience.&quot;</span><span class="p">)</span></div>
</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>