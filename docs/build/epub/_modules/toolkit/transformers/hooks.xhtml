<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>toolkit.transformers.hooks</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for toolkit.transformers.hooks</h1><div class="highlight"><pre>
<span></span><span class="sd">&quot;&quot;&quot;This module contains the Hook class to handle pipeline hooks.&quot;&quot;&quot;</span>

<span class="kn">import</span> <span class="nn">weakref</span>


<div class="viewcode-block" id="Hook"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.feature_hooks.Hook">[docs]</a><span class="k">class</span> <span class="nc">Hook</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Convenient class for handling hooks.</span>

<span class="sd">    :param key: str, unique identifier of the hook</span>
<span class="sd">    :param func: function to be called by the hook</span>

<span class="sd">        The function can not modify any items fed by its arguments.</span>
<span class="sd">    :param default_kwargs: default `func` keyword argument values</span>

<span class="sd">        Example:</span>
<span class="sd">        def foo(x, verbose=False):</span>
<span class="sd">            if verbose:</span>
<span class="sd">                print(&#39;verbosity on&#39;)</span>
<span class="sd">            return x</span>

<span class="sd">        # init with default kwargs</span>
<span class="sd">        foo_hook = Hook(&#39;foo&#39;, foo, verbose=True)</span>
<span class="sd">        # and on the call</span>
<span class="sd">        foo_hook(x=None)  # prints &#39;verbosity on&#39;</span>

<span class="sd">    :param reuse: whether to reuse (share) the Hook</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="n">__INSTANCES</span> <span class="o">=</span> <span class="n">weakref</span><span class="o">.</span><span class="n">WeakSet</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">reuse</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="o">**</span><span class="n">default_kwargs</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Initialize hook.&quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">Hook</span><span class="o">.</span><span class="n">get_current_keys</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">reuse</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;Hook with key `</span><span class="si">%s</span><span class="s2">` already exists&quot;</span> <span class="o">%</span> <span class="n">key</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># TODO: share the existing hook instead of creating a new one</span>
                <span class="k">pass</span>

        <span class="c1"># attr initialization</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_key</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_func</span> <span class="o">=</span> <span class="n">func</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_default_kwargs</span> <span class="o">=</span> <span class="n">default_kwargs</span>

        <span class="c1"># add the key to the class</span>
        <span class="n">Hook</span><span class="o">.</span><span class="n">__INSTANCES</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">key</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Get hook key.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_key</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">default_kwargs</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Get hook default keyword arguments.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_default_kwargs</span>

    <span class="nd">@default_kwargs</span><span class="o">.</span><span class="n">setter</span>
    <span class="k">def</span> <span class="nf">default_kwargs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_default_kwargs</span> <span class="o">=</span> <span class="n">kwargs</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Call the hooked function.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

<div class="viewcode-block" id="Hook.get_current_hooks"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.feature_hooks.Hook.get_current_hooks">[docs]</a>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">get_current_hooks</span><span class="p">(</span><span class="bp">cls</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">:</span>
        <span class="sd">&quot;&quot;&quot;Return instances of this class.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="bp">cls</span><span class="o">.</span><span class="n">__INSTANCES</span><span class="p">)</span></div>

<div class="viewcode-block" id="Hook.get_current_keys"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.feature_hooks.Hook.get_current_keys">[docs]</a>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">get_current_keys</span><span class="p">(</span><span class="bp">cls</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">set</span><span class="p">:</span>
        <span class="sd">&quot;&quot;&quot;Return keys to the instances of this class.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="nb">set</span><span class="p">([</span><span class="n">hook</span><span class="o">.</span><span class="n">key</span> <span class="k">for</span> <span class="n">hook</span> <span class="ow">in</span> <span class="bp">cls</span><span class="o">.</span><span class="n">__INSTANCES</span><span class="p">])</span></div>

<div class="viewcode-block" id="Hook.clear_current_instances"><a class="viewcode-back" href="../../../toolkit.transformers.xhtml#toolkit.transformers.feature_hooks.Hook.clear_current_instances">[docs]</a>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">clear_current_instances</span><span class="p">(</span><span class="bp">cls</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Clean up the references held by the class.</span>

<span class="sd">        This function is not usually called by user, mainly used for tests</span>
<span class="sd">        where cleanup is needed.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">cls</span><span class="o">.</span><span class="n">__INSTANCES</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span></div></div>
</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>