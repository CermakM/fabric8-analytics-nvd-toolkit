<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>toolkit.pipelines package</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="toolkit-pipelines-package">
<h1>toolkit.pipelines package</h1>
<div class="section" id="submodules">
<h2>Submodules</h2>
</div>
<div class="section" id="module-toolkit.pipelines.evaluation">
<span id="toolkit-pipelines-evaluation-module"></span><h2>toolkit.pipelines.evaluation module</h2>
<p>This module contains training pipeline.</p>
<p>The pipeline integrates preprocessors, transformers and classifier
to fit on the data.</p>
<dl class="function">
<dt id="toolkit.pipelines.evaluation.main">
<code class="descclassname">toolkit.pipelines.evaluation.</code><code class="descname">main</code><span class="sig-paren">(</span><em>argv</em><span class="sig-paren">)</span></dt>
<dd><p>Run.</p>
</dd></dl>

<dl class="function">
<dt id="toolkit.pipelines.evaluation.parse_args">
<code class="descclassname">toolkit.pipelines.evaluation.</code><code class="descname">parse_args</code><span class="sig-paren">(</span><em>argv</em><span class="sig-paren">)</span></dt>
<dd><p>Parse arguments.</p>
</dd></dl>

</div>
<div class="section" id="module-toolkit.pipelines.pipelines">
<span id="toolkit-pipelines-pipelines-module"></span><h2>toolkit.pipelines.pipelines module</h2>
<p>Pipeline utility functions for API integration.</p>
<p>This module contains predefined pipelines for API integration.
Those pipelines are made to be used simply and effectively, however,
for more complex cases, it is suggested to build and optimize your own
pipeline from the blocks provided in this toolkit.</p>
<dl class="function">
<dt id="toolkit.pipelines.pipelines.extract_features">
<code class="descclassname">toolkit.pipelines.pipelines.</code><code class="descname">extract_features</code><span class="sig-paren">(</span><em>data: Union[list, numpy.ndarray], attributes: list, share_hooks=True, **kwargs</em><span class="sig-paren">)</span></dt>
<dd><p>Extract data by fitting the extraction pipeline.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>data</strong> – input data to the pipeline</p></li>
<li><p><strong>attributes</strong> – <p>list, attributes for NLTKPreprocessor</p>
<p>List of attributes which will be extracted from NVD and passed to NLTK
preprocessor.</p>
</p></li>
<li><p><strong>share_hooks</strong> – bool, whether to reuse hooks</p></li>
<li><p><strong>kwargs</strong> – <p>optional, key word arguments</p>
<dl class="field-list simple">
<dt class="field-odd">feature_hooks</dt>
<dd class="field-odd"><p>list of feature hooks to be used for feature extraction</p>
</dd>
</dl>
</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>ndarray, featureset</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="toolkit.pipelines.pipelines.extract_labeled_features">
<code class="descclassname">toolkit.pipelines.pipelines.</code><code class="descname">extract_labeled_features</code><span class="sig-paren">(</span><em>data: Union[list, numpy.ndarray], nvd_attributes: list, nltk_feed_attributes: list = None, feature_hooks: list = None, labeling_func=None, share_hooks=True</em><span class="sig-paren">)</span> &#x2192; tuple</dt>
<dd><p>Extract labeled features from input data.</p>
<blockquote>
<div><p>Extracts labeled features by concatenating and fitting the preprocessing
and extraction pipeline.</p>
<p>This is a wrapper for simplification of preprocessing and feature extraction.
For full functionality it is suggested to build custom pipelines.</p>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>data</strong> – input data to the preprocessing pipeline</p></li>
<li><p><strong>nvd_attributes</strong> – <p>list, attributes to output by NVDPreprocessor</p>
<p>The attributes are outputed by NVDPreprocessor and passed
to FeatureExtractor.</p>
</p></li>
<li><p><strong>nltk_feed_attributes</strong> – <p>list, attributes for NLTKPreprocessor</p>
<p>List of attributes which will be fed to NLTKPreprocessor.</p>
</p></li>
<li><p><strong>feature_hooks</strong> – List[Hook], hooks used for feature extraction</p></li>
<li><p><strong>labeling_func</strong> – function used for labeling, passed to LabelPreprocessor</p></li>
<li><p><strong>share_hooks</strong> – bool, whether to reuse hooks</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>tuple, (featureset, classification labels)</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="toolkit.pipelines.pipelines.get_extraction_pipeline">
<code class="descclassname">toolkit.pipelines.pipelines.</code><code class="descname">get_extraction_pipeline</code><span class="sig-paren">(</span><em>attributes</em>, <em>feature_hooks: list = None</em>, <em>share_hooks=False</em><span class="sig-paren">)</span> &#x2192; sklearn.pipeline.Pipeline</dt>
<dd><p>Build the extraction pipeline.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>attributes</strong> – <p>list, attributes for NLTKPreprocessor</p>
<p>List of attributes which will be extracted from NVD and passed to NLTK
preprocessor.</p>
</p></li>
<li><p><strong>feature_hooks</strong> – <p>dict, {feature_key: Hook}
to be used as an argument to <cite>FeatureExtractor</cite></p>
<p>Specify features which should be extracted from the given set.
The hooks are called for each element of the set and return
corresponding features.</p>
</p></li>
<li><p><strong>share_hooks</strong> – boolean, whether to reuse hooks</p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="toolkit.pipelines.pipelines.get_full_training_pipeline">
<code class="descclassname">toolkit.pipelines.pipelines.</code><code class="descname">get_full_training_pipeline</code><span class="sig-paren">(</span><em>labeling_func: Callable = None</em>, <em>feature_hooks=None</em>, <em>share_hooks=False</em><span class="sig-paren">)</span> &#x2192; sklearn.pipeline.Pipeline</dt>
<dd><p>Build the full training pipeline with no predefined attributes.</p>
<p>The pipeline accepts raw data, performs preprocessing and feature
extraction and trains NBClassifier on that data.</p>
<p>The customization of feed and output attributes is fully left to user.
It is necessary to provide <cite>fit_params</cite> when fitting, as this pipeline
does not contain any predefined arguments.</p>
<p><em>must be fit using `fit_transform` method with `fit_params`</em></p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>feature_hooks</strong> – <p>dict, {feature_key: Hook}
to be used as an argument to <cite>FeatureExtractor</cite></p>
<p>Specify features which should be extracted from the given set.
The hooks are called for each element of the set and return
corresponding features.</p>
</p></li>
<li><p><strong>labeling_func</strong> – <p>callable object to be used for labeling</p>
<p>The <cite>labeling_func</cite> is used to create a hook for <cite>LabelPreprocessor</cite>
(see <cite>LabelPreprocessor</cite> documentation for more info).
By default <cite>toolkit.utils.find_</cite> function is used for that purpose.</p>
</p></li>
<li><p><strong>share_hooks</strong> – boolean, whether to reuse hooks</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even"><p>Pipeline</p>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="toolkit.pipelines.pipelines.get_prediction_pipeline">
<code class="descclassname">toolkit.pipelines.pipelines.</code><code class="descname">get_prediction_pipeline</code><span class="sig-paren">(</span><em>classifier: toolkit.transformers.classifiers.NBClassifier</em>, <em>attributes: list = None</em>, <em>feature_hooks: list = None</em><span class="sig-paren">)</span> &#x2192; sklearn.pipeline.Pipeline</dt>
<dd><p>Build the prediction pipeline using existing classifier.</p>
<p><em>must be fit using `fit_predict` method.</em></p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>classifier</strong> – pre-trained NBClassifier</p></li>
<li><p><strong>attributes</strong> – <p>list, attributes for NLTKPreprocessor</p>
<p>List of attributes which will be extracted from NVD and passed to NLTK
preprocessor.</p>
</p></li>
<li><p><strong>feature_hooks</strong> – <p>dict, {feature_key: Hook}
to be used as an argument to <cite>FeatureExtractor</cite></p>
<p>Specify features which should be extracted from the given set.
The hooks are called for each element of the set and return
corresponding features.</p>
</p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="toolkit.pipelines.pipelines.get_preprocessing_pipeline">
<code class="descclassname">toolkit.pipelines.pipelines.</code><code class="descname">get_preprocessing_pipeline</code><span class="sig-paren">(</span><em>attributes: list = None</em>, <em>labeling_func: Callable = None</em>, <em>share_hooks=False</em><span class="sig-paren">)</span> &#x2192; sklearn.pipeline.Pipeline</dt>
<dd><p>Build the preprocessing pipeline using existing classifier.</p>
<p>The preprocessing pipeline takes as an input a list of CVE objects
and outputs labeled data ready for feature extraction.</p>
<p><em>must be fit using `fit_transform` method.</em></p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>attributes</strong> – <p>list, attributes for NLTKPreprocessor</p>
<p>List of attributes which will be extracted from NVD and passed to NLTK
preprocessor.</p>
</p></li>
<li><p><strong>labeling_func</strong> – <p>callable object to be used for labeling</p>
<p>The <cite>labeling_func</cite> is used to create a hook for <cite>LabelPreprocessor</cite>
(see <cite>LabelPreprocessor</cite> documentation for more info).
By default <cite>toolkit.utils.find_</cite> function is used for that purpose.</p>
</p></li>
<li><p><strong>share_hooks</strong> – boolean, whether to reuse hooks</p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl class="function">
<dt id="toolkit.pipelines.pipelines.get_training_pipeline">
<code class="descclassname">toolkit.pipelines.pipelines.</code><code class="descname">get_training_pipeline</code><span class="sig-paren">(</span><em>feature_hooks=None</em><span class="sig-paren">)</span> &#x2192; sklearn.pipeline.Pipeline</dt>
<dd><p>Build the simple training pipeline from FeatureExtractor and NBClassifier.</p>
<p>The pipeline expects as an input preprocessed data
and trains NBClassifier on that data.</p>
<p><em>must be fit using `fit_transform` method.</em></p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>feature_hooks</strong> – <p>dict, {feature_key: Hook}
to be used as an argument to <cite>FeatureExtractor</cite></p>
<p>Specify features which should be extracted from the given set.
The hooks are called for each element of the set and return
corresponding features.</p>
</p>
</dd>
</dl>
</dd></dl>

</div>
<div class="section" id="module-toolkit.pipelines.predict">
<span id="toolkit-pipelines-predict-module"></span><h2>toolkit.pipelines.predict module</h2>
<p>This module contains prediction pipeline.</p>
<p>The pipeline restores pre-trained classifier to make predictions about
given data.</p>
<dl class="function">
<dt id="toolkit.pipelines.predict.main">
<code class="descclassname">toolkit.pipelines.predict.</code><code class="descname">main</code><span class="sig-paren">(</span><em>argv</em><span class="sig-paren">)</span></dt>
<dd><p>Run.</p>
</dd></dl>

<dl class="function">
<dt id="toolkit.pipelines.predict.parse_args">
<code class="descclassname">toolkit.pipelines.predict.</code><code class="descname">parse_args</code><span class="sig-paren">(</span><em>argv</em><span class="sig-paren">)</span></dt>
<dd><p>Parse arguments.</p>
</dd></dl>

</div>
<div class="section" id="module-toolkit.pipelines.train">
<span id="toolkit-pipelines-train-module"></span><h2>toolkit.pipelines.train module</h2>
<p>This module contains training pipeline.</p>
<p>The pipeline integrates preprocessors, transformers and classifier
to fit on the data.</p>
<dl class="function">
<dt id="toolkit.pipelines.train.main">
<code class="descclassname">toolkit.pipelines.train.</code><code class="descname">main</code><span class="sig-paren">(</span><em>argv</em><span class="sig-paren">)</span></dt>
<dd><p>Run.</p>
</dd></dl>

<dl class="function">
<dt id="toolkit.pipelines.train.parse_args">
<code class="descclassname">toolkit.pipelines.train.</code><code class="descname">parse_args</code><span class="sig-paren">(</span><em>argv</em><span class="sig-paren">)</span></dt>
<dd><p>Parse arguments.</p>
</dd></dl>

</div>
<div class="section" id="module-toolkit.pipelines">
<span id="module-contents"></span><h2>Module contents</h2>
<p>Package containing pre-build pipelines and CLIs.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>